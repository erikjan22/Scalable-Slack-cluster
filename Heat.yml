#
# Deploying a network and a compute instance using Heat
#
heat_template_version: 2013-05-23

description: Deploying new master, and mutliple workers.

parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    default: team6key
    constraints:
      - custom_constraint: nova.keypair
  
  flavor:
    type: string
    description: Flavor for the server to be created
    default: ssc.small
    constraints:
      - custom_constraint: nova.flavor
  
 # security_group:
 #   type: string
 #   description: ID of security group for this instance port
 #   default: BootsmaSG
 #   constraints:
 #     - custom_constraint: neutron.security_group
    
  image:
    type: string
    description: Image ID or image name to use for the server
    default: d0c8f522-ffc7-4224-907d-72145525904e
    constraints:
      - custom_constraint: glance.image
    
  net1:
    type: string
    description: (existing) network for the server to be created
    default: SNIC 2019/10-32 Internal IPv4 Network
    constraints:
      - custom_constraint: neutron.network
  
  node_count:
    type: number
    default: 4
    description: Default number of nodes
resources:
 
  # team6_security_group:
    # type: OS::Neutron::SecurityGroup
    # properties:
      # name: team6_security_group
      # rules:
        # - protocol: tcp
          # port_range_min: 5555
          # port_range_max: 5555
        # - protocol: tcp
          # port_range_min: 5000
          # port_range_max: 5000
        # - protocol: tcp
          # port_range_min: 3306
          # port_range_max: 3306
        # - protocol: tcp
          # port_range_min: 5672
          # port_range_max: 5672
        # - protocol: tcp
          # port_range_min: 22
          # port_range_max: 22
          
  Master:
    type: OS::Nova::Server
    properties:
      name: team6_sparkmaster
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
 #     security_group:{ get_param: security_group }
      networks:
        - network: {get_param: net1}
      security_groups: [team6]
 #       - network: {get_resource: private_net}
      user_data: |
            #!/bin/sh
              echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7MO3V59P1dV0RVzyBtWr8v/N4ND9391MOl2Urv1G3qFx7kob0SLPnr4mpew9xDB+3ZzDPRlFts7eLeTiq4pWpwybeZ40KUnAHKttTli7uhAkBKpHYKMOH7WvuMuHYJjY416KfBj2XulpDdS9Jtue/sWOKDZEF+iP1X6wcIuDDd3WAj5dQ7y+IGmFxgGR4U9/tTgnfVL4scVJKu8M9igHyisHNdr7qDi7Z8yhd4sg/b1EFJ6vmirCjKWWgwprhtmxvhZLjnpTxwzwrccztO9wdlj84L61VFAzKvdIc1nwdNJv3AXVzY38LCjdYqSaaiobZtzKfD+/Ryh6k+PSdLqGB ubuntu@team6ansiblehost" >> /home/ubuntu/.ssh/authorized_keys
              apt-add-repository -y ppa:ansible/ansible
              apt-get update -y
              apt-get upgrade -y
      user_data_format: RAW
 
  group_slaves:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: node_count}
      removal_policies: [{'resource_list': ['0']}]
      resource_def:
        type: OS::Nova::Server
        properties:
          name: team6_sparkworker%index% 
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          networks:
            - network: { get_param: net1}
          security_groups: [team6]
          user_data: |
            #!/bin/sh
            echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7MO3V59P1dV0RVzyBtWr8v/N4ND9391MOl2Urv1G3qFx7kob0SLPnr4mpew9xDB+3ZzDPRlFts7eLeTiq4pWpwybeZ40KUnAHKttTli7uhAkBKpHYKMOH7WvuMuHYJjY416KfBj2XulpDdS9Jtue/sWOKDZEF+iP1X6wcIuDDd3WAj5dQ7y+IGmFxgGR4U9/tTgnfVL4scVJKu8M9igHyisHNdr7qDi7Z8yhd4sg/b1EFJ6vmirCjKWWgwprhtmxvhZLjnpTxwzwrccztO9wdlj84L61VFAzKvdIc1nwdNJv3AXVzY38LCjdYqSaaiobZtzKfD+/Ryh6k+PSdLqGB ubuntu@team6ansiblehost" >> /home/ubuntu/.ssh/authorized_keys
            apt-get update -y
            apt-get upgrade -y
          user_data_format: RAW
     
  # association:
    # type: OS::Nova::FloatingIPAssociation
    # properties:
      # floating_ip: { get_param: net1 }
      # server_id: { get_resource: Master }
      
outputs:
  server_networks:
    description: The networks of the deployed server
    value: { get_attr: [Master, networks] }
